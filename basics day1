https://gorm.io/docs/index.html
https://gorm.io/docs/models.html


what is GORM :: ==============
ORM library for Golang
It is an ORM library for dealing with relational databases. 
This gorm library is developed on the top of database/sql package.
Full-Featured ORM
Associations (Has One, Has Many, Belongs To, Many To Many, Polymorphism, Single-table inheritance)
Auto Migrations
Logger


Auto Migration============
Automatically migrate your schema, to keep your schema up to date. NOTE: AutoMigrate will create tables, missing foreign keys, constraints, columns and indexes. 
It will change existing column's type if its size, precision, nullable changed. It WON'T delete unused columns to protect your data

Install=================
go get -u gorm.io/gorm
go get -u gorm.io/driver/postgres

example ::=============

package main

import (
  "gorm.io/gorm"
  "gorm.io/driver/sqlite"
)

type Product struct {
  gorm.Model
  Code  string
  Price uint
}

func main() {
  db, err := gorm.Open(postgres.Open("test.db"), &gorm.Config{})
  if err != nil {
    panic("failed to connect database")
  }
   // Migrate the schema
  db.AutoMigrate(&Product{})
  // Create
  db.Create(&Product{Code: "D42", Price: 100})
}



Declaring Models===========
Models are normal structs with basic Go types, pointers/alias of them or custom types implementing Scanner and Valuer interfaces
For Example:

type User struct {
  ID           uint
  Name         string
  Email        *string
  Age          uint8
  Birthday     *time.Time
  MemberNumber sql.NullString
  ActivatedAt  sql.NullTime
  CreatedAt    time.Time
  UpdatedAt    time.Time
}
You can set other fields as primary key with tag primaryKey
  UUID   string `gorm:"primaryKey"`

Pluralized Table Name
GORM pluralizes struct name to snake_cases as table name, for struct User, its table name is users by convention

Column Name
Column db name uses the field’s name’s snake_case by convention.
type User struct {
  ID        uint      // column name is `id`
  Name      string    // column name is `name`
  Birthday  time.Time // column name is `birthday`
  CreatedAt time.Time // column name is `created_at`
}

You can override the column name with tag column or use NamingStrategy
type Animal struct {
  AnimalID int64     `gorm:"column:beast_id"`         // set name to `beast_id`
  Birthday time.Time `gorm:"column:day_of_the_beast"` // set name to `day_of_the_beast`
  Age      int64     `gorm:"column:age_of_the_beast"` // set name to `age_of_the_beast`
}


Connecting to a Database============
db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})
Create Record
user := User{Name: "Jinzhu", Age: 18, Birthday: time.Now()}
result := db.Create(&user) // pass pointer of data to Create

Retrieving a single object======== https://gorm.io/docs/query.html

// Get the first record ordered by primary key
db.First(&user)
// SELECT * FROM users ORDER BY id LIMIT 1;

// Get one record, no specified order
db.Take(&user)
// SELECT * FROM users LIMIT 1;

// Get last record, ordered by primary key desc
db.Last(&user)
// SELECT * FROM users ORDER BY id DESC LIMIT 1;

result := db.First(&user)
result.RowsAffected // returns count of records found
result.Error        // returns error or nil

If the primary key is a string (for example, like a uuid), the query will be written as follows:

db.First(&user, "id = ?", "1b74413f-f3b8-409f-ac47-e8c062e3472a")
// SELECT * FROM users WHERE id = "1b74413f-f3b8-409f-ac47-e8c062e3472a";
Retrieving all objects
// Get all records
result := db.Find(&users)
// SELECT * FROM users;

Limit & Offset
Limit specify the max number of records to retrieve
Offset specify the number of records to skip before starting to return the records

db.Limit(10).Offset(5).Find(&users)
// SELECT * FROM users OFFSET 5 LIMIT 10;

Distinct
Selecting distinct values from the model
db.Distinct("name", "age").Order("name, age desc").Find(&results)

Scan
Scanning results into a struct works similarly to the way we use Find


Save will save all fields when performing the Updating SQL

db.First(&user)

user.Name = "jinzhu 2"
user.Age = 100
db.Save(&user)
// UPDATE users SET name='jinzhu 2', age=100, birthday='2016-01-01', updated_at = '2013-11-17 21:34:10' WHERE id=111;


// Update with conditions
db.Model(&User{}).Where("active = ?", true).Update("name", "hello")
// UPDATE users SET name='hello', updated_at='2013-11-17 21:34:10' WHERE active=true;

Delete a Record
When deleting a record, the deleted value needs to have primary key or it will trigger a Batch Delete, for example:

// Email's ID is `10`
db.Delete(&email)
// DELETE from emails where id = 10;

// Delete with additional conditions
db.Where("name = ?", "jinzhu").Delete(&email)
// DELETE from emails where id = 10 AND name = "jinzhu";
Delete with primary key
GORM allows to delete objects using primary key(s) with inline condition, it works with numbers, check out Query Inline Conditions for details

db.Delete(&User{}, 10)
// DELETE FROM users WHERE id = 10;


Batch Delete
The specified value has no primary value, GORM will perform a batch delete, it will delete all matched records

db.Where("email LIKE ?", "%jinzhu%").Delete(Email{})
// DELETE from emails where email LIKE "%jinzhu%";

db.Delete(Email{}, "email LIKE ?", "%jinzhu%")
// DELETE from emails where email LIKE "%jinzhu%";






